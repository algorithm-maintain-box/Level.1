#include <bits/stdc++.h>
#include <cmath>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'maxHeight' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY wallPositions
 *  2. INTEGER_ARRAY wallHeights
 */

int maxHeight(vector<int> wallPositions, vector<int> wallHeights)
{
    int max_val = 0;
    for (auto i = 1; i < wallPositions.size(); i++)
    {
        auto space = wallPositions[i] - wallPositions[i - 1] - 1;
        if (space <= 0)
        {
            continue;
        }

        auto range = abs(wallHeights[i] - wallHeights[i - 1]);
        auto forward = space - range;
        if (forward == 0)
        {
            max_val = max(max_val, max(wallHeights[i], wallHeights[i - 1]));
        }
        else if (forward > 0)
        {
            range = max(wallHeights[i], wallHeights[i - 1]);

            if (forward % 2)
            {
                max_val = max(max_val, range + (forward / 2) + 1);
            }
            else
            {
                max_val = max(max_val, range + (forward / 2));
            }
        }
    }

    return max_val;
}

int main()


#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);


/*
 * Complete the 'countBalancingElements' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER_ARRAY arr as parameter.
 */

int result = 0;

void dfs(vector<int> arr)
{
    if (arr.size() < 2)
    {
        return;
    }

    int odd = 0;
    int even = 0;
    for (auto i = 0; i < arr.size(); i++)
    {
        if (i % 2)
        {
            odd += arr[i];
        }
        else
        {
            even += arr[i];
        }
    }

    if (odd == even)
    {
        result++;
    }

    for (auto i = 0; i < arr.size(); i++)
    {
        vector<int> temp{};
        temp = arr;
        temp.erase(temp.begin() + i);
        dfs(temp);
    }
}

int countBalancingElements(vector<int> arr)
{
    dfs(arr);
    return result;
}
int main()